Public interface Sortable{  
}
Public virtual Class sObjectSorter implements Comparable{
    Public sObject sobj;
    Public String sortfield;
    Public String sortOrder;
    
    Public sObjectSorter(){}
    Public sObjectSorter(sObject ob,String sf,String so){
        sobj=ob;
        sortfield=sf;
        SortOrder=so;
    }
    public virtual  Integer compareTo(Object compareTo) {
        
        sObjectSorter cTo = (sObjectSorter)compareTo;
        Sobject compareToOppy=cTo.sobj;
        String sObjType=String.valueof(sobj.getSObjectType());
        String fieldType=SorterHelper.ReturnFieldType(sObjType,sortfield);
        return sorterHelper.sortRecord(SortOrder,fieldtype,sobj.get(sortfield),compareToOppy.get(sortfield));               
    }
    
}
Public Class sorterHelper{
    
    Public static  String ReturnFieldType(String SobjectName,String field){       
        Map<String,Schema.DescribeFieldResult> fieldMap=new Map<String,Schema.DescribeFieldResult>();  
        Map<String, Schema.SObjectType> m  = Schema.getGlobalDescribe() ;
        Schema.SObjectType s = m.get(sobjectName) ;
        Schema.DescribeSObjectResult r = s.getDescribe() ;
        Map<String,Schema.SObjectField> fields = r.fields.getMap() ;   
        
        for(String f : fields.keyset()){
            Schema.DescribeFieldResult desribeResult = fields.get(f).getDescribe();
            fieldMap.put(desribeResult.getName(),desribeResult);                      
        }
        return String.valueof(fieldMap.get(field).getType());
    }
    
    Public Static datetime convertInDateTime(String strDT){      
       String [] dateAndTime=strDt.split('T');
       String [] datevalue=dateAndTime.get(0).split('-');           
       dateTime dt=system.now();        
        if(datevalue.size()>2){
            String newDate=datevalue.get(0)+'-'+datevalue.get(1)+'-'+datevalue.get(2);
            
            if(dateAndTime.size()>1){
                string hour = dateAndTime.get(1).split(':').get(0);
                string minute = dateAndTime.get(1).split(':').get(1);
                string second = dateAndTime.get(1).split(':').get(2);
                newDate+=+ ' ' + hour + ':' + minute + ':' + second;
            }else
                newDate+=+ ' ' + '00'+ ':' + '00'+ ':' + '00';
            dt=datetime.valueof(newDate);
        }
        return dt;     
    }
    Public static Integer sortRecord(String sortOrder,String FieldType,Object firstValue,Object SecondValue){
        Integer returnValue = 0; 
        //for both integer and Decimal
        if(fieldtype.toLowerCase()=='Integer' || fieldtype.toLowerCase()=='decimal'){
            if((SortOrder == 'ASC' && ((Decimal)firstValue)>(decimal)SecondValue) || 
                (SortOrder == 'DESC' && (Decimal)firstValue <(Decimal)SecondValue)){
                returnValue=1;
            }
            else if((SortOrder == 'DESC' && ((Decimal)firstValue)>((Decimal)SecondValue)) || 
                (SortOrder == 'ASC' && ((Decimal)firstValue)<((Decimal)SecondValue))){
                returnValue=-1;
            }            
        } 
        //for datetime and date
        else if(fieldtype.toLowerCase()=='datetime' || fieldtype.toLowerCase()=='date'){     
           dateTime current;
           dateTime compareToDate;
           Try{
               current =(datetime)firstValue;
               compareToDate=(datetime)SecondValue;         
           }catch(Exception e){
               current =convertInDateTime(String.valueof(firstValue));
               compareToDate=convertInDateTime(String.valueof(SecondValue));         
           }
            
            if((SortOrder == 'ASC' && current >compareToDate) || 
                (SortOrder == 'DESC' && current <compareToDate)){
                returnValue=1;
            }
            else if((SortOrder == 'DESC' && current >compareToDate) || 
                (SortOrder == 'ASC' && current <compareToDate)){
                returnValue=-1;
            }          
        }  
        //for text and picklist fields           
        else{
            if((SortOrder == 'ASC' && String.valueof(firstValue)>String.valueof(SecondValue)) || 
                (SortOrder == 'DESC' && String.valueof(firstValue)<String.valueof(SecondValue))){
                returnValue=1;
            }
            else if((SortOrder == 'DESC' && String.valueof(firstValue)>String.valueof(SecondValue)) || 
                (SortOrder == 'ASC' && String.valueof(firstValue)<String.valueof(SecondValue))){
                returnValue=-1;
            }
        }
        Return returnValue;
        
    }
}

public Class customClassSorter implements Comparable{
    Public Sortable so;
    Public String sortfield;
    Public String SortOrder;
    Public Map<String, Object> classMap;
    Public String fieldtype;
    
    Public CustomClassSorter(Sortable ob,String sf,String sorder,String FieldType){
        so=ob;
        sortfield=sf;
        SortOrder=sorder;
        classMap = (Map<String, Object>)JSON.deserializeUntyped(JSON.serialize(ob));
        this.FieldType=FieldType;
    } 
    public Integer compareTo(Object compareTo) {       
        CustomClassSorter compareToOppy = (CustomClassSorter)compareTo; 
        Sortable socopy=compareToOppy.so;
        Map<String, Object> classMapToCompare=(Map<String, Object>)JSON.deserializeUntyped(JSON.serialize(socopy)); 
        Return sorterHelper.sortRecord(SortOrder,fieldtype,classMap.get(sortfield),classMapToCompare.get(sortfield)); 
    }
}

public Class Sorter{
    
    Public static Void Sort(List<sObject> records,String fieldname,String SortOrder){
              
        List<sObjectSorter> theList=new List<sObjectSorter>(); 
        for(sObject s:records){   
            sObjectSorter v;
            if(!fieldname.contains('.')) {
                v = new sObjectSorter(s,fieldname,SortOrder);
                theList.add(v);
            }else{
                v=New sObjectRelationalSorter(s,SortOrder,fieldname);  //fieldname should be hardcoded  
                theList.add(v);
            }    
        }
        theList.sort();
        records.clear();
             
        for(sObjectSorter cs:theList){
            if(!fieldname.contains('.'))
                records.add(cs.sobj);
            else{
               sObjectRelationalSorter rs = (sObjectRelationalSorter)cs; 
               records.add(rs.sobj);
            }            
        }
    }
    
    Public static Void Sort(List<Sortable> records,String fieldname,String SortOrder,String FieldType){ 
        List<CustomClassSorter> theList= new List<CustomClassSorter>();       
        for(Sortable s:records){     
            CustomClassSorter v = new CustomClassSorter(s,fieldname,SortOrder,FieldType);
            theList.add(v);
        }
        theList.sort();
        records.clear();
        for(CustomClassSorter cs:theList){
            records.add(cs.so);
        } 
    }
}

public class sObjectRelationalSorter extends sObjectSorter{
    Public sObject sobj;
    Public String sortfield;
    Public String sortOrder;
    
    Public sObjectRelationalSorter (){}
    
    Public sObjectRelationalSorter (sObject sb,String sorder,String sortfield){
        sobj=sb;
        SortOrder=sorder;
        this.sortfield=sortfield;
    }
    public override  Integer compareTo(Object compareTo) { 
           
        sObjectRelationalSorter  cTo = (sObjectRelationalSorter)compareTo;      
        Sobject compareToOppy=cTo.sobj;               
        Integer returnValue = 0;
        String sObjType=String.valueof(sobj.getSObjectType());
        
        // parse the sobject to exact sObject and use the logic given below and add cases
        // An example for relationship field based sorting
               
        if(sObjType=='Contact' && sortfield.tolowercase()=='account.name'){
            Contact current = (Contact)sobj;
            Contact contactcomparedTo= (Contact)compareToOppy;            
            if((SortOrder == 'ASC' && current.Account.name>contactcomparedTo.account.name) || 
                (SortOrder == 'DESC' &&  current.Account.name<contactcomparedTo.account.name)){
                returnValue=1;
            }
            else if((SortOrder == 'DESC' && current.Account.name>contactcomparedTo.account.name) || 
                (SortOrder == 'ASC' &&  current.Account.name<contactcomparedTo.account.name)){
                returnValue=-1;
            }                  
        }
        return returnValue;  
    }
}
